{"id":532728118,"lang":"cpp","time":"3 months, 2 weeks","timestamp":1628007531,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/532728118/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"7 MB","code":"class MyQueue {\npublic:\n    /** Initialize your data structure here. */\n    stack<int> s1,s2;\n    int curr_size;\n    MyQueue() {\n        curr_size = 0;\n    }\n    \n    /** Push element x to the back of queue. */\n    void push(int x) {\n        while(!s1.empty()){\n            s2.push(s1.top());\n            s1.pop();\n        }\n        s1.push(x);\n        while(!s2.empty()){\n            s1.push(s2.top());\n            s2.pop();\n        }\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n     \n            int x = s1.top();\n            s1.pop();\n            return x;\n        \n    }\n    \n    /** Get the front element. */\n    int peek() {\n        return s1.top();\n    }\n    \n    /** Returns whether the queue is empty. */\n    bool empty() {\n        return (s1.empty());\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"111111111111111111111","title_slug":"implement-queue-using-stacks"}