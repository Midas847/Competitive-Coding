{"id":568144587,"lang":"cpp","time":"1 month, 1 week","timestamp":1633754567,"status_display":"Accepted","runtime":"148 ms","url":"/submissions/detail/568144587/","is_pending":"Not Pending","title":"Path with Maximum Probability","memory":"63 MB","code":"class Solution {\npublic:\n    int v;\n    list<pair<int,double>>* adj;\n    void addEdge(int u,int w,double wt){\n        adj[u].push_back({w, wt});\n        adj[w].push_back({u, wt});\n    }\n    double Dijsktra(int start,int end){\n        vector<double>dist(v+1,-1.0);\n        vector<bool>visited(v,false);\n        priority_queue<pair<double,int>> pq;\n        pq.push({1.0, start});\n        dist[start] = 1.0;\n        while(!pq.empty()){\n            int u = pq.top().second;\n            if(u == end)\n                return dist[u];\n            pq.pop();\n            if(visited[u]==true)\n                continue;\n            visited[u] = true;\n            for(auto i=adj[u].begin();i!=adj[u].end();i++){\n                int v = (*i).first;\n                double weight = (*i).second;\n                if(dist[u]*weight > dist[v]){\n                    dist[v] = dist[u]*weight;\n                    pq.push({dist[v], v});\n                }\n            }\n        }\n        return 0.0;\n    }\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\n        v = n;\n        adj = new list<pair<int,double>>[v];\n        for(int i=0;i<edges.size();i++){\n            addEdge(edges[i][0],edges[i][1],succProb[i]);\n        }\n        return Dijsktra(start,end);\n    }\n};","compare_result":"1111111111111111","title_slug":"path-with-maximum-probability"}