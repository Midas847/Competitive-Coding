{"id":568664976,"lang":"cpp","time":"1 month, 1 week","timestamp":1633839168,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/568664976/","is_pending":"Not Pending","title":"Minimum Operations to Make a Uni-Value Grid","memory":"N/A","code":"class Solution {\npublic:\n    int minOperations(vector<vector<int>>& grid, int x) {\n        int gridSum = 0;\n        vector<int> v;\n        for(int i=0;i<grid.size();i++){\n            for(int j=0;j<grid[i].size();j++){\n                gridSum+=grid[i][j];\n                v.push_back(grid[i][j]*grid.size()*grid.size());\n            }\n        }\n        int minSum = INT_MAX;\n        int res = 0;\n        for(int i=0;i<v.size();i++){\n            if(abs(v[i]-gridSum) < minSum){\n                minSum = abs(v[i]-gridSum);\n                res = v[i];\n            }\n        }\n        cout<<res<<\"\\n\";\n        int m  = res/(grid.size()*grid.size());\n        int c = 0;\n        for(int i=0;i<grid.size();i++){\n            for(int j=0;j<grid[i].size();j++){\n                if(abs(grid[i][j]-m)%x!=0){\n                    //c+=abs(grid[i][j]-m)/x;\n                    return -1;\n                }\n                else{\n                    c+=abs(grid[i][j]-m)/x;\n                }\n            }\n        }\n            return c;\n    }\n};","compare_result":"111111001011011111111111111111100000000000","title_slug":"minimum-operations-to-make-a-uni-value-grid"}