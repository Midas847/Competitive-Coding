{"id":563278614,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1632973325,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/563278614/","is_pending":"Not Pending","title":"Split Linked List in Parts","memory":"8.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<ListNode*> splitListToParts(ListNode* head, int k) {\n        int len = 0;\n        ListNode* temp = head;\n        while(temp){\n            len++;\n            temp = temp->next;\n        }\n        int n = len/k;\n        int extra = len%k;\n        vector<ListNode*> res;\n        temp = head;\n        while(temp){\n            res.push_back(temp);\n            int currLen = 1;\n            while(currLen < n){\n                temp = temp->next;\n                currLen++;\n            }\n            if(extra>0 && len > k){\n                temp = temp->next;\n                extra--;\n            }\n            ListNode* x = temp->next;\n            temp->next = NULL;\n            temp = x;\n        }\n        while(len < k){\n            res.push_back(NULL);\n            len++;\n        }\n        return res;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"split-linked-list-in-parts"}