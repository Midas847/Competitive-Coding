{"id":539746502,"lang":"cpp","time":"3Â months","timestamp":1629180424,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/539746502/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"10.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        if(root==NULL)\n            return true;\n        queue<TreeNode*> q;\n        q.push(root);\n        bool flag = false;\n        while(!q.empty()){\n            TreeNode* temp = q.front();\n            q.pop();\n            if(temp->left){\n                if(flag==true)\n                    return false;\n                q.push(temp->left);\n            }\n            else\n                flag = true;\n            if(temp->right){\n                if(flag==true)\n                    return false;\n                q.push(temp->right);\n            }\n            else\n                flag = true;\n        }\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree"}