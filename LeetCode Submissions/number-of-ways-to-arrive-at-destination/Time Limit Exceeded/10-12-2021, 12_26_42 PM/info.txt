{"id":569896971,"lang":"cpp","time":"1 month, 1 week","timestamp":1634021802,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/569896971/","is_pending":"Not Pending","title":"Number of Ways to Arrive at Destination","memory":"N/A","code":"class Solution {\npublic:\n    int v;\n    list<pair<int,int>> *adj;\n    void addEdge(int u,int w,int wt){\n        adj[u].push_back({w, wt});\n        adj[w].push_back({u, wt});\n    }\n    int Dijsktra(int src){\n        long int mod = 1e9+7;\n        priority_queue<pair<long int,int>,vector<pair<long int,int>>,greater<pair<long int,int>>>pq;\n        vector<long int> dist(v, LONG_MAX);\n        vector<bool>visited(v,false);\n        pq.push({0, src});\n        dist[src] = 0;\n        vector<long>ways(v,0);      \n        ways[0] = 1;\n        while(!pq.empty()){\n            int u = pq.top().second;\n            if(visited[u]==true)\n                continue;\n            visited[u]=true;\n            pq.pop();\n            for(auto x:adj[u]){\n                int V = x.first;\n                int weight = x.second;\n                if(dist[V] > dist[u]+weight){\n                    dist[V] = dist[u]+weight;\n                    ways[V] = ways[u];\n                    pq.push({dist[V],V});\n                }\n                else if(dist[V]==weight+dist[u]){\n                    ways[V] = (ways[V]+ways[u])%mod;\n                }\n            }\n        }\n        return ways[v-1];\n    }\n    int countPaths(int n, vector<vector<int>>& roads) {\n        v = n;\n        adj = new list<pair<int,int>>[v];\n        for(int i=0;i<roads.size();i++){\n            addEdge(roads[i][0], roads[i][1], roads[i][2]);\n        }\n        return Dijsktra(0);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111000000000","title_slug":"number-of-ways-to-arrive-at-destination"}