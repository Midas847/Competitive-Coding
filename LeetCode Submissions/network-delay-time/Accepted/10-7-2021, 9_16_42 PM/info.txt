{"id":567393309,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1633621602,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/567393309/","is_pending":"Not Pending","title":"Network Delay Time","memory":"41.4 MB","code":"class Solution {\npublic:\n    int v;\n    list<pair<int,int>>* adj;\n    void addEdge(int u,int v,int wt){\n        adj[u].push_back({v, wt});\n    }\n    int Dijkstra(int src){\n        set<pair<int,int>> setds;\n        vector<int> dist(v,INT_MAX);\n        setds.insert({0,src});\n        dist[src] = 0;\n        while(!setds.empty()){\n            pair<int,int> tmp = *(setds.begin());\n            setds.erase(setds.begin());\n            int u = tmp.second;\n            //list<pair<int,int>>::iterator i;\n            for(auto i = adj[u].begin();i!=adj[u].end();i++){\n                int V = (*i).first;\n                int weight = (*i).second;\n                if(dist[V] > dist[u] + weight){\n                    if(dist[V]!=INT_MAX)\n                        setds.erase(setds.find({dist[V],V}));\n                    dist[V] = dist[u] + weight;\n                    setds.insert({dist[V],V});\n                }\n            }\n        }\n        int ans = INT_MIN;\n        for(int i = 0;i<v;i++){\n            if(dist[i] == INT_MAX)\n                return -1;\n            ans = max(ans,dist[i]);\n        }\n        return ans;\n    }\n    int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n        v = n;\n        adj=new list<pair<int,int>>[v];\n        for(int i=0;i<times.size();i++){\n            addEdge(times[i][0]-1,times[i][1]-1,times[i][2]);\n        }      \n        return Dijkstra(k-1);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"network-delay-time"}