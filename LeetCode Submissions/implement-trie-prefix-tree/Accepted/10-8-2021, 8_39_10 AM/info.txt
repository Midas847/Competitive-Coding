{"id":567645824,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1633662550,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/567645824/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"44.8 MB","code":"class Trie {\npublic:\n    Trie() {\n        \n    }\n    \n    void insert(string word) {\n        Trie* node = this;\n        for(char ch:word){\n            ch -= 'a';\n            if(!node->next[ch]){\n                node->next[ch] = new Trie();\n            }\n            node = node->next[ch];\n        }\n         node->isword = true;\n    }\n    \n    bool search(string word) {\n        Trie* node = this;\n        for(char ch:word){\n            ch -= 'a';\n            if(!node->next[ch]){\n                return false;\n            }\n            node = node->next[ch];\n        }\n        return node->isword;\n    }\n    \n    bool startsWith(string prefix) {\n        Trie* node = this;\n        for(char ch:prefix){\n            ch -= 'a';\n            if(!node->next[ch]){\n                return false;\n            }\n            node = node->next[ch];\n        }\n        return true;\n    }\n    private:\n        Trie* next[26] = {};\n        bool isword = false;\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}