{"id":570394258,"lang":"cpp","time":"1 month, 1 week","timestamp":1634098791,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/570394258/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"18.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* newNode(int data){\n        TreeNode* temp = new TreeNode();\n        temp->val = data;\n        temp->left = temp->right = NULL;\n        return temp;\n    }\n    TreeNode* bstUtil(vector<int> preorder,int* preIndex,int key,int max,int min,int size){\n        if(*preIndex >= size)\n            return NULL;\n        TreeNode* root = NULL;\n        if(key > min && key < max){\n            root = newNode(key);\n            *preIndex = *preIndex+1;\n            if(*preIndex < size){\n                root->left = bstUtil(preorder,preIndex,preorder[*preIndex],key,min,size);\n            }\n            if(*preIndex < size){\n                root->right = bstUtil(preorder,preIndex,preorder[*preIndex],max,key,size);\n            }\n        }\n        return root;\n    }\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        int size = preorder.size();\n        int preIndex = 0;\n        return bstUtil(preorder,&preIndex,preorder[0],INT_MAX,INT_MIN,size);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal"}